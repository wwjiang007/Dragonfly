// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// PreheatStatus The status of preheat task.
//   WAITING -----> RUNNING -----> SUCCESS
//                            |--> FAILED
// The initial status of a created preheat task is WAITING.
// It's finished when a preheat task's status is FAILED or SUCCESS.
// A finished preheat task's information can be queried within 24 hours.
//
// swagger:model PreheatStatus
type PreheatStatus string

const (

	// PreheatStatusWAITING captures enum value "WAITING"
	PreheatStatusWAITING PreheatStatus = "WAITING"

	// PreheatStatusRUNNING captures enum value "RUNNING"
	PreheatStatusRUNNING PreheatStatus = "RUNNING"

	// PreheatStatusFAILED captures enum value "FAILED"
	PreheatStatusFAILED PreheatStatus = "FAILED"

	// PreheatStatusSUCCESS captures enum value "SUCCESS"
	PreheatStatusSUCCESS PreheatStatus = "SUCCESS"
)

// for schema
var preheatStatusEnum []interface{}

func init() {
	var res []PreheatStatus
	if err := json.Unmarshal([]byte(`["WAITING","RUNNING","FAILED","SUCCESS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		preheatStatusEnum = append(preheatStatusEnum, v)
	}
}

func (m PreheatStatus) validatePreheatStatusEnum(path, location string, value PreheatStatus) error {
	if err := validate.Enum(path, location, value, preheatStatusEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this preheat status
func (m PreheatStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePreheatStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
